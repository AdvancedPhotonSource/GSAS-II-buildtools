# Compile the GSAS-II source code to create and upload a tar file
# with the binaries matching a specified Python and numpy version
#
name: compile GSAS-II

permissions:
  contents: write
  
on: [workflow_dispatch]

jobs:

  test:
    outputs:
      tar-file:
        description: "tar file generated by script"
        value: ${{ steps.test-compile-step.tar-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        os: [macos-14]
#        os: [windows-latest]
#        os: [macos-13]
    
    using: composite
    steps:
      - uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: gcc
          version: 13

      - name: Test save output
        id: test-compile-step
        shell: bash -l {0}
        run: |
           cd _gsas2/sources
           echo $RUNNER_OS
           newdir=test-1234.tgz
           echo "tar-name=$(echo ${TMPFILE}${newdir})" >> $GITHUB_OUTPUT

      - name: Read output
        run: echo "${{ steps.test-compile-step.tar-name }}"

#      - run: |
#          ${{ env.FC }} -v # environment vars FC, CC, and CXX are set
#          env
#          ${{ steps.setup-fortran.outputs.fc }} ... # outputs work too

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GSAS-II sources
        shell: bash -l {0}
        run: |
          git clone --depth 50 https://github.com/AdvancedPhotonSource/GSAS-II.git _gsas2

      - name: Set up conda  # note that conda-build-env.yml fixes Python & numpy versions (alas)
        #uses: conda-incubator/setup-miniconda@v3.0.3
        uses: conda-incubator/setup-miniconda@030178870c779d9e5e1b4e563269f3aa69b04081 # v3.0.3 using hash for security
        with:
          activate-environment: build
          environment-file: compile/conda-build-env.yml
          miniforge-version: latest

      - name: compile with scons
        id: compile-step
        shell: bash -l {0}
        run: |
           cd _gsas2/sources
           echo $RUNNER_OS
           if [ "$RUNNER_OS" == "macOS" ]; then
              echo "Mac build"
              scons -c # cleanup old
              scons install=T LIBGFORTRAN=T LIBGCC=T # LIBGFORTRAN seems OK on OSX
              newdir=`cd ../AllBinaries/; ls -d mac*`
              echo Created $newdir

              # fix dylib naming
              # otool -L ../AllBinaries/$newdir/*
              python ../../compile/macRelink.py ../AllBinaries/$newdir

              echo "Built from G2 version `git log HEAD --oneline | head -1`" >> ../AllBinaries/$newdir/Build.notes.txt
              conda list -f python | tail -1 >> ../AllBinaries/$newdir/Build.notes.txt
              conda list -f numpy | tail -1 >> ../AllBinaries/$newdir/Build.notes.txt
              echo "Using gfortran, info follows" >> ../AllBinaries/$newdir/Build.notes.txt
              gfortran -v 2>> ../AllBinaries/$newdir/Build.notes.txt
              echo "*** Dependencies" >> ../AllBinaries/$newdir/Build.notes.txt
              otool -L ../AllBinaries/$newdir/* >> ../AllBinaries/$newdir/Build.notes.txt

              #/opt/homebrew/opt/gcc@13/lib/gcc/13/libquadmath.0.dylib 
              #cp $FLIBloc/libquadmath.0.dylib $WORKSPACE/GSASII/AllBinaries/$newdir/
              echo *** Showing Build.notes.txt
              cat ../AllBinaries/$newdir/Build.notes.txt
              # create tar file with binaries
              cd ../AllBinaries/$newdir
              export TARFILE=${TMPDIR}${newdir}.tgz
              echo creating $TARFILE
              tar cvzf $TARFILE *

           elif [ "$RUNNER_OS" == "Windows" ]; then
              echo "Windows build"
           else
              echo "Linux build"
           fi

      # for debug, create a copy of the build directory
      - name: Save artifact  # creates zip file with directory contents
        if: failure()
        uses: actions/upload-pages-artifact@v3
        with:
            path: _gsas2
            name: compile
            retention-days: 1

      - name: Release on Unix
        uses: softprops/action-gh-release@v2
        if: matrix.os != 'windows-latest'
        with:
          files: ${{ env.TARFILE }}
          tag_name: v1.0.1

#       - name: show build logs
#         if: failure()
#         shell: bash -l {0}
#         run: |
#           if [ "$RUNNER_OS" == "Windows" ]; then
#              echo Show install/g2complete/meta.yaml
#              type install/g2complete/meta.yaml
#              echo Show showing c:\tmp\constructor_bld.log
#              type c:/tmp/constructor_bld.log
#              echo Show showing c:\tmp\gitstrap.log
#              type c:/tmp/gitstrap.log
#           else
#              echo Show install/g2complete/meta.yaml
#              cat install/g2complete/meta.yaml
#              echo Show contents of /tmp/conda_G2build_out.log
#              cat /tmp/conda_G2build_out.log
#              echo Show contents of /tmp/gitstrap.log
#              cat /tmp/gitstrap.log
#           fi

#       - name: create conda gsas2full installer
#         shell: bash -l {0}
#         run: |
#           cd install
#           CONDA_SOLVER=classic constructor g2full   # can't use mamba in constructor 3.7

# # Now have a gsas2full-####-<platform>.sh or gsas2full-####-<platform>.exe 
# # file in install. 
#       - name: duplicate Unix
#         shell: bash -l {0}
#         if: matrix.os != 'windows-latest'
#         run: |
#           cd install
#           cp -v *.sh `ls gsas2full-*.sh | sed -e s/-[0-9]*-/-Latest-/`
  
#       - name: duplicate Windows
#         if: matrix.os == 'windows-latest'
#         run: copy install/*.exe install/gsas2full-Latest-Windows-x86_64.exe 

# # Now have above and gsas2full-Latest-<platform>.sh or gsas2full-Latest-<platform>.exe 
# # file in install. 

#       - name: Release on Windows
#         uses: softprops/action-gh-release@v2
#         if: matrix.os == 'windows-latest'
#         with:
#           files: install/*.exe
#           tag_name: v1.0.1
 
# Now have a gsas2full-####-<platform>.sh or gsas2full-####-<platform>.exe file in
# install. That file should get uploaded to the Assets area here:
#    https://github.com/AdvancedPhotonSource/GSAS-II-buildtools/releases/latest
# It should also be copied to replace file gsas2full-Latest-<platform>.*

# outtakes: 

#      - name: Test the g2full installer
#        shell: bash -l {0}
#        run: |
#          if [ "$RUNNER_OS" != "Windows" ]; then
#             ls -lt install/*.sh
#             #rm -rf ~/build
#             #bash `ls install/*.sh` -b -p ~/testinstall
#          fi

    
